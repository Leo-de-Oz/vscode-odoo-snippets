{
    "odoo_manifest": {
        "prefix": "oman",
        "body": [
            "{",
            "\t'name': '${1}',",
            "\t'version': '${2:11.0.1.0.0}',",
            "\t'summary': '${3}',",
            "\t'category': '${4}',",
            "\t'author': '${5}',",
            "\t'maintainer': '${5}',",
            "\t'website': '${6}',",
            "\t'license': '${7}',",
            "\t'contributors': [",
            "\t\t'${8}',",
            "\t],",
            "\t'depends': [",
            "\t\t'${9}',",
            "\t],",
            "\t'external_dependencies': {",
            "\t\t'python': [",
            "\t\t\t'${10}',",
            "\t\t],",
            "\t},",
            "\t'data': [",
            "\t\t'${11}',",
            "\t],",
            "\t'installable': ${12:True},",
            "\t'auto_install': ${13:False},",
            "\t'application': ${14:False},",
            "}",
            "$0"
        ],
        "description": "Create Odoo Manifest"
    },
    "odoo_imports": {
        "prefix": "oimp",
        "body": [
            "from odoo import api, fields, models, exceptions",
            "\n\n",
            "$0"
        ],
        "description": "Create New Odoo Model"
    },
    "odoo_model": {
        "prefix": "omod",
        "body": [
            "\n\nclass ${1:ModuleName}(models.Model):",
            "\t_name = '${2:module.name}'",
            "$0"
        ],
        "description": "Add New Odoo Model"
    },
    "odoo_inherit_model": {
        "prefix": "omodi",
        "body": [
            "\n\nclass ${1:ModuleName}(models.Model):",
            "\t_inherit = '${2:module.name}'",
            "$0"
        ],
        "description": "Inherit Existing Odoo Model"
    },
    "odoo_transient_model": {
        "prefix": "otra",
        "body": [
            "\n\nclass ${1:ModuleName}(models.TransientModel):",
            "\t_name = '${2:module.name}'",
            "$0"
        ],
        "description": "Add New Transient Model"
    },
    "odoo_inherit_transient_model": {
        "prefix": "otrai",
        "body": [
            "\n\nclass ${1:ModuleName}(models.TransientModel):",
            "\t_inherit = '${2:module.name}'",
            "$0"
        ],
        "description": "Inherit Existing Transient Model"
    },
    "odoo_test_model": {
        "prefix": "omodt",
        "body": [
            "from odoo.tests.common import TransactionCase",
            "\n\nclass Test${1:ModuleName}(TransactionCase):",
            "\n\tdef setUp(self):",
            "\t\tsuper(Test${1:ModuleName}, self).setUp()",
            "$0"
        ],
        "description": "Add Test Class to Odoo Model"
    },
    "odoo_field_binary": {
        "prefix": "ofbin",
        "body": [
            "${1:new_field} = fields.Binary(string='${2}')",
            "$0"
        ],
        "description": "Add new field of type Binary"
    },
    "odoo_field_boolean": {
        "prefix": "ofbool",
        "body": [
            "${1:new_field} = fields.Boolean(string='${2}')",
            "$0"
        ],
        "description": "Add new field of type Boolean"
    },
    "odoo_field_char": {
        "prefix": "ofchar",
        "body": [
            "${1:new_field} = fields.Char(string='${2}')",
            "$0"
        ],
        "description": "Add new field of type Char"
    },
    "odoo_field_date": {
        "prefix": "ofdate",
        "body": [
            "${1:new_field} = fields.Date(string='${2}')",
            "$0"
        ],
        "description": "Add new field of type Date"
    },
    "odoo_field_datetime": {
        "prefix": "oftime",
        "body": [
            "${1:new_field} = fields.Datetime(string='${2}')",
            "$0"
        ],
        "description": "Add new field of type DateTime"
    },
    "odoo_field_float": {
        "prefix": "offloat",
        "body": [
            "${1:new_field} = fields.Float(string='${2}')",
            "$0"
        ],
        "description": "Add new field of type Float"
    },
    "odoo_field_html": {
        "prefix": "ofhtml",
        "body": [
            "${1:new_field} = fields.HTML(string='${2}')",
            "$0"
        ],
        "description": "Add new field of type HTML"
    },
    "odoo_field_int": {
        "prefix": "ofint",
        "body": [
            "${1:new_field} = fields.Integer(string='${2}')",
            "$0"
        ],
        "description": "Add new field of type Integer"
    },
    "odoo_field_text": {
        "prefix": "oftxt",
        "body": [
            "${1:new_field} = fields.Text(string='${2}')",
            "$0"
        ],
        "description": "Add new field of type Text"
    },
    "odoo_field_selection": {
        "prefix": "ofsel",
        "body": [
            "${1:new_field} = fields.Selection(string='${2}', selection=[('${3}', '${4}'), ('${5}', '${6}'),])",
            "$0"
        ],
        "description": "Add new field of type Selection"
    },
    "odoo_field_many2one": {
        "prefix": "ofm2o",
        "body": [
            "${1:new_field} = fields.Many2one('${2}', string='${3}')",
            "$0"
        ],
        "description": "Add new field of type Many2one"
    },
    "odoo_field_many2many": {
        "prefix": "ofm2m",
        "body": [
            "${1:new_field} = fields.Many2many('${2:model}','${3:rel_name}','${4:first_id}','${5:second_id}', string='${6}')",
            "$0"
        ],
        "description": "Add new field of type Many2many"
    },
    "odoo_field_one2many": {
        "prefix": "ofo2m",
        "body": [
            "${1:new_field} = fields.One2many('${2:model}','${3:foreign_key}', string='${4}')",
            "$0"
        ],
        "description": "Add new field of type One2many"
    },
    "odoo_method_create":{
        "prefix": "omcreate",
        "body":[
            "@api.model",
            "def create(self, values):",
            "\t# Add code here",
            "\treturn super(${1:ClassName}, self).create(values)",
            "$0"
        ],
        "description": "Add a method create"
    },
    "odoo_method_write": {
        "prefix": "omwrite",
        "body": [
            "@api.multi",
            "def write(self, values):",
            "\t# Add code here",
            "\treturn super(${1:ClassName}, self).write(values)",
            "$0"
        ],
        "description": "Add a method write"
    },
    "odoo_method_unlink": {
        "prefix": "omunlink",
        "body": [
            "@api.multi",
            "def unlink(self):",
            "\t# Add code here",
            "\treturn super(${1:ClassName}, self).unlink()",
            "$0"
        ],
        "description": "Add a method unlink"
    },
    "odoo_method_compute": {
        "prefix": "omcomp",
        "body": [
            "@api.depends('${1:field_name}')",
            "def _get_${1:field_name}(self):",
            "\tfor record in self:",
            "\t\trecord.${1:field_name} = ''",
            "$0"
        ],
        "description": "Add a compute method"
    },
    "odoo_method_onchange": {
        "prefix": "omonchange",
        "body": [
            "@api.onchange('${1:field_name}')",
            "def _onchange_${1:field_name}(self):",
            "\tself.${1:field_name} = ''",
            "$0"
        ],
        "description": "Add a onchange method"
    },
    "odoo_method_constrains": {
        "prefix": "omconstrains",
        "body": [
            "@api.constrains('${1:field_name}')",
            "def _verify_${1:field_name}(self):",
            "\tself.${1:field_name} = ''",
            "$0"
        ],
        "description": "Add a Constrains method"
    },
    "odoo_return_model": {
        "prefix": "oretm",
        "body": [
            "return {",
			"\t'name':'${1:name_action}'",
			"\t'type': 'ir.actions.act_window'",
			"\t'res_model': '${2:model_name}'",
			"\t'view_mode': 'form'",
			"\t'view_type': 'form'",
			"\t'target': '${3:type}'",
            "}",
            "$0"
        ],
        "description": "Return Create Object"
    }
}
